{"version":3,"sources":["sound/rightAnswer.wav","sound/wrongAnswer.mp3","sound/timerExpired.wav","components/questionbaseclass.js","arraycomponents/arrayquestion1.js","arraycomponents/arrayquestion1r.js","arraycomponents/arrayquestion1b.js","arraycomponents/arrayquestion2.js","arraycomponents/arrayquestion2r.js","arraycomponents/arrayquestionfactory.js","arraycomponents/arrayconstants.jsx","components/Timer.jsx","components/CheckBox.jsx","components/Options.jsx","components/ScoreKeeper.jsx","util/appconstants.jsx","components/GridButton.jsx","components/AnswerGrid.jsx","components/Question.jsx","components/GameEngine.jsx","arraycomponents/ArrayGameEngine.jsx","stringcomponents/stringconstants.jsx","stringcomponents/stringquestion1.js","stringcomponents/stringquestion1r.js","stringcomponents/stringquestion1s.js","stringcomponents/stringquestion1loop.js","stringcomponents/stringquestionfactory.js","stringcomponents/StringGameEngine.jsx","relationalcomponents/relationalquestiongreater.js","relationalcomponents/relationalquestionlesser.js","relationalcomponents/relationalquestionand.js","relationalcomponents/relationalquestionor.js","relationalcomponents/relationalqchallenge1.js","relationalcomponents/relationalqchallenge2.js","relationalcomponents/relationalqchallenge3.js","relationalcomponents/relationalquestionfactory.js","relationalcomponents/relationalconstants.jsx","relationalcomponents/RelationalGameDesign.jsx","booleancomponents/booleanbasicand.js","booleancomponents/booleanbasicor.js","booleancomponents/booleancompoundand.js","booleancomponents/booleancompoundor.js","booleancomponents/booleanchallenge1.js","booleancomponents/booleanchallengeor1.js","booleancomponents/booleanchallengeand1.js","booleancomponents/booleanquestionfactory.js","booleancomponents/booleanconstants.jsx","booleancomponents/BooleanGameEngine.jsx","loopcomponents/loopquestion1.js","loopcomponents/loopquestion1b.js","loopcomponents/loopquestionnested.js","loopcomponents/loopquestiondo.js","loopcomponents/loopquestionfactory.js","loopcomponents/loopconstants.jsx","mixedcomponents/mixedquestionfactory.js","mixedcomponents/MixedGameEngine.jsx","mixedcomponents/mixedconstants.jsx","loopcomponents/LoopGameEngine.jsx","App.js","index.js"],"names":["module","exports","QuestionBaseClass","constructor","props","rows","cols","handleButton","row","col","newState","this","buttonStates","disabled","allCorrect","incrementScore","pointValue","clearButtonStates","nextQuestion","addToTimer","updateGrid","incorrect","displayValues","disabledRow","buttonStateRow","displayValueRow","push","bind","randomIncrementOrDecrement","temp","Math","floor","random","length","timedOut","gameOver","displayQuestion","array","i","text","React","createElement","key","arrayQuestion1","aq","index","concat","arrayQuestion1r","increment","lowerBound","upperBound","equalsChar","arrayQuestion1b","decrement","arrayQuestion2","arrayQuestion2r","lowerBoundRow","upperBoundRow","incrementCol","lowerBoundCol","upperBoundCol","equalsCharRow","equalsCharCol","r","c","ArrayQuestionFactory","options","loops","twod","option","id","checked","getQuestion","questionTypes","Timer","Component","super","state","decrementTimer","timerOn","count","setTimeout","setState","timeout","resetTimer","maxtime","addtime","stopTimer","componentWillUnmount","clearTimeout","componentDidMount","autoStart","render","CheckBox","handleCheckBox","e","onClick","target","className","type","onChange","label","Options","args","handleOption","map","Checkbox","globalScore","ScoreKeeper","handleClick","myButtonRef","current","focus","score","createRef","click","resetGlobalScore","resetScore","getScore","ref","BUTTONCOLORS","COLORNAMES","GridButton","getButtonClasses","AppConstants","value","buttonClicked","displayButton","undefined","display","displayValue","AnswerGrid","makeButtons","question","buttonKey","nextRow","Question","qf","restart","Object","assign","labels","GLOBALOPTIONS","GameEngine","playSound","s","sound","Howl","src","getOptionValue","play","handleOptions","handleRestart","console","log","myScoreKeeperRef","myTimerRef","myQuestionRef","wrongAnswer","timerTimeOut","rightAnswer","timerExpired","makeTimer","Howler","volume","title","ARRAYOPTIONS","ArrayGameEngine","getLabelChecked","WORDPOOL","stringQuestion1","wordIndex","StringConstants","currentWord","sq","substring","stringQuestion1r","stringQuestion1s","stringQuestion1loop","StringQuestionFactory","StringQuestion1","StringQuestion1s","StringQuestion1r","StringQuestion1loop","STRINGOPTIONS","StringGameEngine","relationalQuestionGreater","dataSize","all","none","op1","equalSign","adjustedOp1","buttonValue","relationalQuestionLesser","relationalQuestionAnd","opGT","opLT","equalSignGT","adjustedOpGT","equalSignLT","adjustedOpLT","relationalQuestionOr","relationalQchallenge1","rq","opNE","relationalQchallenge2","relationalQchallenge3","RelationalQuestionFactory","compound","challenge","RelationalQuestionGreater","RelationalQuestionLesser","RelationalQuestionAnd","RelationalQuestionOr","RelationalQchallenge1","RelationalQchallenge2","RelationalQchallenge3","RELATIONALOPTIONS","RelationalGameEngine","timer","booleanBasicAnd","bq","yes","no","randomColorIndex","color","randomNumber","displayColorIndex","displayNumber","notColor","notNumber","button","booleanBasicOr","booleanCompoundAnd","displayColorIndex2","notColor2","booleanCompoundOr","displayNumber2","notNumber2","split","booleanChallenge1","booleanChallengeOr1","booleanChallengeAnd1","BooleanQuestionFactory","BooleanBasicAnd","BooleanBasicOr","BooleanCompoundAnd","BooleanCompoundOr","BooleanChallenge1","BooleanChallengeOr1","BooleanChallengeAnd1","BOOLEANOPTIONS","BooleanGameEngine","loopQuestion1","lq","loopQuestion1b","loopQuestionNested","incrementOuter","lowerBoundOuter","upperBoundOuter","incrementInner","lowerBoundInner","upperBoundInner","equalsCharOuter","equalsCharInner","j","loopQuestionDo","counter","LoopQuestionFactory","backwards","do","nested","MixedQuestionFactory","factories","factory","MixedGameEngine","LOOPOPTIONS","LoopGameEngine","App","gameEngines","currentGame","href","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98ec9431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rightAnswer.a1e6ec0d.wav\";","module.exports = __webpack_public_path__ + \"static/media/wrongAnswer.5acd1a08.mp3\";","module.exports = __webpack_public_path__ + \"static/media/timerExpired.33b123bc.wav\";","import React from \"react\";\n\nexport class QuestionBaseClass {\n  constructor(props, rows, cols) {\n    //console.log(\"quesiton base constructor props\", props);\n    this.props = props;\n    this.disabled = [];\n    this.buttonStates = [];\n    this.displayValues = [];\n    for (let row = 0; row < rows; ++row) {\n      const disabledRow = [];\n      const buttonStateRow = [];\n      const displayValueRow = [];\n      for (let col = 0; col < cols; ++col) {\n        disabledRow.push(false);\n        buttonStateRow.push(0);\n        displayValueRow.push(col);\n      }\n      this.disabled.push(disabledRow);\n      this.buttonStates.push(buttonStateRow);\n      this.displayValues.push(displayValueRow);\n    }\n    this.handleButton = this.handleButton.bind(this);\n    // console.log(\"display values\", this.displayValues);\n  }\n\n  randomIncrementOrDecrement() {\n    // determine probability distribution\n    const temp = [1, 1, 1, 1, 1, 2, 2, 2, 3];\n    return temp[Math.floor(Math.random() * temp.length)];\n  }\n\n  handleButton = (row, col) => {\n    //console.log(\"button clicked: row col \", row, col, this);\n    //let question = { ...this.state.question };\n    // right choice made = 2, wrong choice made = 3\n    const newState = (this.buttonStates[row][col] =\n      this.buttonStates[row][col] === 1 ? 2 : 3);\n    this.buttonStates[row][col] = newState;\n    this.disabled[row][col] = true;\n\n    //console.log(\"newStates \", this.buttonStates);\n    if (newState === 3) {\n      this.incorrect(false);\n      return;\n    }\n    if (this.allCorrect()) {\n      //console.log(\"all correct getting next question\");\n\n      this.props.incrementScore(this.pointValue);\n      this.clearButtonStates();\n      this.props.nextQuestion();\n      return; // do not update grid if all correct\n      // console.log(\"got new question\", question);\n    } else {\n      this.props.addToTimer();\n    }\n    this.props.updateGrid();\n  };\n\n  incorrect(timedOut) {\n    //console.log(\"incorrect timeout = \", timedOut);\n    for (let row = 0; row < this.buttonStates.length; ++row) {\n      for (let col = 0; col < this.buttonStates[0].length; ++col) {\n        this.disabled[row][col] = true; // disable all the buttons\n        // mark which buttons should have been selected\n        if (this.buttonStates[row][col] === 1) {\n          this.buttonStates[row][col] = 4;\n        }\n      }\n    }\n\n    this.props.updateGrid();\n\n    this.props.gameOver(timedOut);\n  }\n\n  allCorrect() {\n    //console.log(\"entering allcorrect method\");\n\n    for (let row = 0; row < this.buttonStates.length; ++row) {\n      for (let col = 0; col < this.buttonStates[0].length; ++col) {\n        if (this.buttonStates[row][col] === 1) {\n          //console.log(\"not all correct yet\");\n          return false;\n        }\n      }\n    }\n\n    //console.log(\"all correct \");\n\n    return true;\n  }\n\n  clearButtonStates() {\n    for (let row = 0; row < this.buttonStates.length; ++row) {\n      for (let col = 0; col < this.buttonStates[0].length; ++col) {\n        this.buttonStates[row][col] = 0;\n      }\n    }\n  }\n\n  displayQuestion() {\n    //console.log(\"display question: \", this.text);\n    const array = [];\n    for (let i = 0; i < this.text.length; ++i) {\n      array.push(<h5 key={i}>{this.text[i]}</h5>);\n    }\n    return array;\n  }\n}\n\nexport default QuestionBaseClass;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction arrayQuestion1(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 1, 8);\n  // console.log(\"array question base class props\", props);\n  aq.pointValue = 1;\n  aq.rows = 1;\n  // question1 will have 1 row and 8 columns\n  const index = Math.floor(Math.random() * aq.buttonStates[0].length);\n  aq.buttonStates[0][index] = 1;\n  aq.text = [`System.out.print( a[${index}] );`];\n  //console.log(\"array question1 created aq = \", aq);\n  return aq;\n}\n\nexport default arrayQuestion1;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction arrayQuestion1r(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 1, 8);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 2;\n  aq.rows = 1;\n  // increment is 1,2 or 3\n  const increment = aq.randomIncrementOrDecrement();\n  const lowerBound = Math.floor(Math.random() * 4);\n  let upperBound = Math.floor(Math.random() * (8 - lowerBound)) + lowerBound;\n  const equalsChar =\n    Math.random() > 0.5 || upperBound === lowerBound ? \"=\" : \"\";\n  aq.text = [\n    \"for(int i=\" +\n      lowerBound +\n      \"; i <\" +\n      equalsChar +\n      \" \" +\n      upperBound +\n      \"; i+=\" +\n      increment +\n      \") {\",\n    \"   System.out.print( a[i] );\",\n    \"}\",\n  ];\n  if (equalsChar === \"=\") {\n    ++upperBound;\n  }\n  for (let i = lowerBound; i < upperBound; i += increment) {\n    aq.buttonStates[0][i] = 1;\n  }\n  return aq;\n}\n\nexport default arrayQuestion1r;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction arrayQuestion1b(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 1, 8);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 2;\n  aq.rows = 1;\n  const decrement = aq.randomIncrementOrDecrement();\n  let lowerBound = Math.floor(Math.random() * 4);\n  const upperBound = Math.floor(Math.random() * (8 - lowerBound)) + lowerBound;\n  const equalsChar =\n    Math.random() > 0.5 || upperBound === lowerBound ? \"=\" : \"\";\n\n  aq.text = [\n    \"for(int i=\" +\n      upperBound +\n      \"; i >\" +\n      equalsChar +\n      \" \" +\n      lowerBound +\n      \"; i-=\" +\n      decrement +\n      \") {\",\n    \"   System.out.print( a[i] );\",\n    \"}\",\n  ];\n  if (equalsChar === \"=\") {\n    --lowerBound;\n  }\n  for (let i = upperBound; i > lowerBound; i -= decrement) {\n    aq.buttonStates[0][i] = 1;\n  }\n  return aq;\n}\n\nexport default arrayQuestion1b;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction arrayQuestion2(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 3, 8);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 3;\n  aq.rows = 3;\n  const row = Math.floor(Math.random() * aq.buttonStates.length);\n  const col = Math.floor(Math.random() * aq.buttonStates[0].length);\n  aq.buttonStates[row][col] = 1;\n  //this.buttonIds = [0, 1, 2, 3, 4, 5, 6, 7];\n  aq.text = [`System.out.print( c[${row}][${col}] );`];\n  return aq;\n}\n\nexport default arrayQuestion2;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction arrayQuestion2r(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 3, 8);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 3;\n  aq.rows = 3;\n  // increment is 1 or 2\n  const incrementRow = 1;\n  const lowerBoundRow = Math.floor(Math.random() * 2);\n  let upperBoundRow =\n    Math.floor(Math.random() * (3 - lowerBoundRow)) + lowerBoundRow;\n\n  const incrementCol = aq.randomIncrementOrDecrement();\n  const lowerBoundCol = Math.floor(Math.random() * 4);\n  let upperBoundCol =\n    Math.floor(Math.random() * (7 - lowerBoundCol)) + lowerBoundCol;\n\n  const equalsCharRow =\n    Math.random() > 0.5 || upperBoundRow === lowerBoundRow ? \"=\" : \"\";\n  const equalsCharCol =\n    Math.random() > 0.5 || upperBoundCol === lowerBoundCol ? \"=\" : \"\";\n\n  aq.text = [\n    \"for(int r=\" +\n      lowerBoundRow +\n      \"; r <\" +\n      equalsCharRow +\n      \" \" +\n      upperBoundRow +\n      \"; r+=\" +\n      incrementRow +\n      \") {\",\n    \"   for(int c=\" +\n      lowerBoundCol +\n      \"; c <\" +\n      equalsCharCol +\n      \" \" +\n      upperBoundCol +\n      \"; c+=\" +\n      incrementCol +\n      \") {\",\n    \"      System.out.print( a[r][c] );\",\n    \"   }\",\n    \"}\",\n  ];\n  if (equalsCharRow === \"=\") {\n    ++upperBoundRow;\n  }\n  if (equalsCharCol === \"=\") {\n    ++upperBoundCol;\n  }\n  //console.log(\"button states\", aq.buttonStates);\n  for (let r = lowerBoundRow; r < upperBoundRow; r += incrementRow) {\n    for (let c = lowerBoundCol; c < upperBoundCol; c += incrementCol) {\n      aq.buttonStates[r][c] = 1;\n    }\n  }\n  return aq;\n}\n\nexport default arrayQuestion2r;\n","import * as ArrayConstants from \"./arrayconstants\";\nimport arrayQuestion1 from \"./arrayquestion1\";\nimport arrayQuestion1r from \"./arrayquestion1r\";\nimport arrayQuestion1b from \"./arrayquestion1b\";\nimport arrayQuestion2 from \"./arrayquestion2\";\nimport arrayQuestion2r from \"./arrayquestion2r\";\n\nexport class ArrayQuestionFactory {\n  constructor(options) {\n    if (options) {\n      this.options = [...options];\n      // console.log(\"qf constructor\", this.options);\n      this.loops = false;\n      this.twod = false;\n      for (let option of options) {\n        // console.log(\"for option:\", option.id, option.checked);\n        if (option.id === ArrayConstants.LOOPSOPTIONID) {\n          this.loops = option.checked;\n          // console.log(\"changing loops option to \", this.loops);\n        }\n        if (option.id === ArrayConstants.TWODOPTIONID) {\n          this.twod = option.checked;\n          // console.log(\"changing 2D option to \", this.twod);\n        }\n      }\n    } else {\n      // mixed game\n      this.loops = true;\n      this.twod = true;\n    }\n  }\n\n  getQuestion(props) {\n    //console.log(\"getquestion props\", props);\n\n    //console.log(\"getQuestion loops 2D\", this.loops, this.twod);\n\n    let questionTypes = [arrayQuestion1];\n\n    // add loops?\n    if (this.loops) {\n      questionTypes.push(arrayQuestion1r);\n      questionTypes.push(arrayQuestion1b);\n    }\n\n    // add 2D?\n    if (this.twod) {\n      questionTypes.push(arrayQuestion2);\n      questionTypes.push(arrayQuestion2);\n    }\n\n    // add 2D with loops?\n    if (this.loops && this.twod) {\n      questionTypes.push(arrayQuestion2r);\n      questionTypes.push(arrayQuestion2r);\n      questionTypes.push(arrayQuestion2r);\n      questionTypes.push(arrayQuestion2r);\n    }\n\n    const random = Math.floor(Math.random() * questionTypes.length);\n    const question = new questionTypes[random](props);\n    //console.log(\"creating question in factory\", question);\n    //const question = new arrayQuestion1(props);\n    //const question = new arrayQuestion1b(props);\n    //const question = new arrayQuestion2();\n    //const question = new arrayQuestion2r();\n    //console.log(\"getQuestion\", question);\n    return question;\n  }\n}\n","export const ARRAYGAMETITLE = \"Disarray: An Array Game\";\n\n// timer values for Disarray Game\nexport const MAXTIME = 8; // start timer value\nexport const ADDTIME = 2; // bonus for paritally correct answers\n\nexport const DEFAULTLABELSOPTION = false;\n\nexport const LABELSOPTIONID = 2;\nexport const LOOPSOPTIONID = 3;\nexport const TWODOPTIONID = 4;\n","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: this.props.maxtime,\n      timerOn: false,\n      id: null,\n    };\n  }\n\n  componentWillUnmount() {\n    // console.log(\"cancelling timer id#:\", this.state.id);\n    clearTimeout(this.state.id);\n  }\n\n  componentDidMount() {\n    // guard against multiple timers existing concurrently\n    if (this.state.timerOn) {\n      this.setState({\n        count: this.props.maxtime,\n      });\n      return;\n    }\n\n    let id = 0;\n    let timerOn = false;\n    // currently, timer does not start until first question answered\n    //console.log(\"timer autostart = \", this.props.autoStart);\n    if (this.props.autoStart) {\n      id = setTimeout(this.decrementTimer, 1000);\n      timerOn = true;\n    }\n\n    this.setState({\n      count: this.props.maxtime,\n      timerOn: timerOn,\n      id: id,\n    });\n\n    // console.log(\"Timer did mount \");\n  }\n\n  decrementTimer = () => {\n    // console.log(\"decrementing Timer #\", this.state.id);\n\n    if (this.state.timerOn) {\n      if (this.state.count > 0) {\n        const id = setTimeout(this.decrementTimer, 1000);\n        this.setState({ count: this.state.count - 1, id: id });\n      } else {\n        // console.log(\"timer expired id:\", this.props.timeout, this.state.id);\n        this.props.timeout();\n        this.setState({ timerOn: false });\n      }\n    }\n  };\n\n  resetTimer = () => {\n    // do not create multiple timers\n    if (!this.state.timerOn) {\n      // eslint-disable-next-line\n      const id = setTimeout(this.decrementTimer, 1000);\n      //  console.log(\"restarting timer id=\", id);\n    }\n    this.setState({\n      count: this.props.maxtime,\n      timerOn: true,\n      // id: id,\n    });\n  };\n\n  addToTimer = () => {\n    if (this.state.timerOn)\n      this.setState({ count: this.state.count + this.props.addtime });\n  };\n\n  stopTimer = () => {\n    //console.log(\"cancelling timer \");\n    this.setState({ count: 0 });\n  };\n\n  render() {\n    const { count } = this.state;\n    return (\n      <div>\n        <h3>Time left: {count} seconds</h3>\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React, { Component } from \"react\";\nclass CheckBox extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { id: props.id };\n  }\n\n  handleCheckBox = (e) => {\n    this.props.onClick(this.state.id, e.target.checked);\n  };\n\n  render() {\n    return (\n      <span className=\"m-2\">\n        <input\n          type=\"checkbox\"\n          checked={this.props.checked}\n          onChange={this.handleCheckBox}\n        />\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nexport default CheckBox;\n","import React, { Component } from \"react\";\nimport Checkbox from \"../components/CheckBox\";\nimport \"../css/Options.css\";\n\nclass Options extends Component {\n  handleOption = (id, checked) => {\n    //console.log(\"checkbox clicked id, checked\", id, checked);\n    const options = [...this.props.options];\n    // console.log(\"options \", options);\n    for (let i = 0; i < options.length; ++i) {\n      if (options[i].id === id) {\n        options[i].checked = checked;\n      }\n    }\n    //console.log(\"options class options\", options);\n\n    this.props.onChange(options, id, checked);\n  };\n\n  render() {\n    let options = [];\n    if (this.props.options) {\n      options = [...this.props.options];\n    }\n    // console.log(options);\n\n    return (\n      <div className=\"options\">\n        {options.map((option) => (\n          <Checkbox\n            key={option.id}\n            onClick={this.handleOption}\n            checked={option.checked}\n            id={option.id}\n            label={option.label}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Options;\n","import React, { Component } from \"react\";\n\n// shared across games\nlet globalScore = 0;\n\nclass ScoreKeeper extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = { score: globalScore };\n    this.myButtonRef = React.createRef();\n  }\n\n  incrementScore(increment = 1) {\n    //console.log(\"button = \", this.myButtonRef.current);\n    this.myButtonRef.current.click();\n    globalScore += increment;\n    this.setState({ score: globalScore });\n  }\n\n  handleClick = () => {\n    // console.log(\"score button was clicked.\");\n    // move focus to scoreboard (and away from answer buttons)\n    this.myButtonRef.current.focus();\n  };\n\n  resetGlobalScore() {\n    //console.log(\"resetting global score to 0\");\n    globalScore = 0;\n  }\n\n  resetScore() {\n    globalScore = 0;\n    this.setState({ score: globalScore });\n  }\n\n  getScore() {\n    return this.state.score;\n  }\n\n  render() {\n    return (\n      <div>\n        <button\n          // autoFocus\n          ref={this.myButtonRef}\n          onClick={this.handleClick}\n          className=\"btn btn-outline-primary btn-lg m-2\"\n        >\n          Score = {this.state.score}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ScoreKeeper;\n","export const APPTITLE = \"CSA Games V1.3\";\n\nexport const SOUNDOPTIONID = 1;\nexport const TIMEROPTIONID = 2;\nexport const DEFAULTSOUNDOPTION = false;\nexport const DEFAULTTIMEROPTION = false;\n\nexport const DEFAULTGAMEINDEX = 0;\nexport const LOOPGAMEINDEX = 3;\nexport const ARRAYGAMEINDEX = 4;\nexport const STRINGGAMEINDEX = 0;\nexport const RELATIONALGAMEINDEX = 1;\nexport const BOOLEANGAMEINDEX = 2;\nexport const MIXEDGAMEINDEX = 5;\n\nexport const DISCLAIMER =\n  \"License: Creative Commons BY-NC 4.0: c.sarkar. For more games go to -->\";\n\n// following colors are used in both GridButton and Boolean Game\n// any changes here must also be reflected in the color names array, below.\nexport const BUTTONCOLORS = [\n  \"btn-primary\", // unselected=false (blue)\n  // \"btn-info\",\n  \"btn-primary\", // unselected-true\n  \"btn-success\", // selected-true (green)\n  \"btn-danger\", // selected-false (red)\n  \"btn-warning\", // partially-correct (yellow)\n  \"btn-success\", // green\n  \"btn-secondary\", // grey\n  \"btn-info\", // light blue\n];\n\nexport const USABLECOLORS = 5; // must be kept in synch with arrays,below and above\nexport const COLORNAMES = [\n  \"blue\",\n  \"blue\",\n  \"green\", // 1\n  \"red\",\n  \"yellow\",\n  \"green\",\n  \"grey\", // 5\n  \"blue\",\n];\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\nimport \"../css/gridbutton.css\";\n\nclass GridButton extends Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    this.state = { row: this.props.row, col: this.props.col };\n  }\n\n  getButtonClasses() {\n    //bug fix 7/17/20: added shadow-none to remove focus when clicked\n    const buttonClasses = \"gb btn btn-sm \";\n    //console.log(buttonClasses + buttonColors[this.props.value]);\n    return buttonClasses + AppConstants.BUTTONCOLORS[this.props.value];\n  }\n\n  buttonClicked() {\n    const { row, col } = this.state;\n    //console.log(\"button clicked: props \", this.props);\n    this.props.onClick(row, col);\n  }\n\n  displayButton() {\n    const display =\n      this.props.display === undefined ? true : this.props.display;\n    if (display) {\n      return this.props.displayValue;\n    } else {\n      return \"*\";\n    }\n  }\n\n  render() {\n    //console.log(\"rendering gridbutton\");\n    return (\n      <button\n        key={this.props.id}\n        disabled={this.props.disabled}\n        className={this.getButtonClasses()}\n        /* className={\"btn btn-sm m-2 btn-primary \"} */\n        onClick={() => this.buttonClicked()}\n      >\n        {this.displayButton()}\n      </button>\n    );\n  }\n}\n\nexport default GridButton;\n","import React, { Component } from \"react\";\nimport GridButton from \"./GridButton\";\nclass AnswerGrid extends Component {\n  state = {};\n  // eslint-disable-next-line\n  constructor(props) {\n    super(props);\n    // console.log(\"answer grid constructor\", this.props);\n  }\n\n  makeButtons() {\n    const rows = this.props.question.buttonStates.length;\n    const cols = this.props.question.buttonStates[0].length;\n\n    //console.log(\"make buttons display values\", this.props);\n\n    let array = [];\n    let buttonKey = 0;\n    for (let row = 0; row < rows; ++row) {\n      let nextRow = [];\n      for (let col = 0; col < cols; ++col) {\n        nextRow.push(\n          <GridButton\n            key={buttonKey++}\n            onClick={this.props.question.handleButton}\n            disabled={this.props.question.disabled[row][col]}\n            value={this.props.question.buttonStates[row][col]}\n            displayValue={this.props.question.displayValues[row][col]}\n            display={this.props.display}\n            row={row}\n            col={col}\n          />\n        );\n      }\n      array.push(<div key={row}>{nextRow}</div>);\n    }\n    return array;\n  }\n\n  render() {\n    //console.log(\"rendering answergrid\");\n    return this.makeButtons();\n  }\n}\n\nexport default AnswerGrid;\n","import React, { Component } from \"react\";\nimport AnswerGrid from \"../components/AnswerGrid\";\nimport \"../css/code.css\";\n\nclass Question extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    let question = this.props.qf.getQuestion(props);\n    this.state = { question };\n    // this.handleButton = this.handleButton.bind(this);\n    //console.log(\"question constructor\", this.state);\n  }\n\n  restart(qf) {\n    //console.log(\"restarting question sequence\");\n    const question = qf.getQuestion(this.props);\n    this.setState({ question });\n  }\n\n  nextQuestion() {\n    const question = this.props.qf.getQuestion(this.props);\n    //console.log(\"saving question to state\", question);\n    this.setState({ question });\n  }\n\n  updateGrid() {\n    //console.log(\"update grid\");\n    this.setState({ question: this.state.question });\n  }\n\n  timeout() {\n    //console.log(\"question timeout\");\n    this.state.question.incorrect(true);\n  }\n\n  render() {\n    // console.log(\"question rerender \", this.state.question);\n    return (\n      <div>\n        <div className={\"codelines\"}>\n          {this.state.question.displayQuestion()}\n        </div>\n        <AnswerGrid\n          display={this.props.labels}\n          onClick={this.state.question.handleButton}\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from \"react\";\nimport Timer from \"../components/Timer\";\nimport Options from \"../components/Options\";\nimport ScoreKeeper from \"../components/ScoreKeeper\";\nimport Question from \"../components/Question\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\nimport \"../css/GameEngine.css\";\nimport rightAnswer from \"../sound/rightAnswer.wav\";\nimport wrongAnswer from \"../sound/wrongAnswer.mp3\";\nimport timerExpired from \"../sound/timerExpired.wav\";\nimport { Howl, Howler } from \"howler\";\n\nconst GLOBALOPTIONS = [\n  {\n    id: AppConstants.SOUNDOPTIONID,\n    label: \"Sound\",\n    checked: AppConstants.DEFAULTSOUNDOPTION,\n  },\n  {\n    id: AppConstants.TIMEROPTIONID,\n    label: \"Timer\",\n    checked: AppConstants.DEFAULTTIMEROPTION,\n  },\n];\n\nclass GameEngine extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    //const qf = new this.props.questionFactory(this.props.options);\n    const qf = new this.props.qf(this.props.options);\n    this.state = { qf: qf, options: GLOBALOPTIONS };\n    this.myScoreKeeperRef = React.createRef();\n    this.myTimerRef = React.createRef();\n    this.myQuestionRef = React.createRef();\n    this.incrementScore = this.incrementScore.bind(this);\n    this.updateGrid = this.updateGrid.bind(this);\n    this.addToTimer = this.addToTimer.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.timerTimeOut = this.timerTimeOut.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    //console.log(\"exiting game engine constructor\");\n  }\n\n  playSound = (s) => {\n    const sound = new Howl({ src: [s] });\n    // is the sound enabled?\n    if (this.getOptionValue(AppConstants.SOUNDOPTIONID)) {\n      //console.log(\"playing sound\");\n      sound.play();\n    }\n  };\n\n  getOptionValue(id) {\n    let options = [...this.state.options];\n    for (let i = 0; i < options.length; ++i) {\n      if (options[i].id === id) return options[i].checked;\n    }\n    console.log(\"unknown option id supplied\", id, options);\n    return false; // option not found\n  }\n\n  handleOptions = (options, id, checked) => {\n    this.setState(options);\n  };\n\n  handleRestart = () => {\n    console.log(\"restart was pressed\");\n    this.myScoreKeeperRef.current.resetScore();\n    // restart the timer?\n    if (this.getOptionValue(AppConstants.TIMEROPTIONID)) {\n      this.myTimerRef.current.resetTimer();\n    }\n    const qf = new this.props.qf(this.props.options);\n    // bug fix: since qf will not get upated in state for a while\n    // use the local copy of the new qf to restart the question sequence\n    this.myQuestionRef.current.restart(qf);\n    this.setState({ qf });\n  };\n\n  gameOver = (timedOut) => {\n    //console.log(\"game over timeout = \", timedOut);\n    // user loses this game but switches to new type of game ...\n    // do not allow old score to stay but continue to display\n    // old score until RESTART or new game is selected\n    this.myScoreKeeperRef.current.resetGlobalScore();\n    if (!timedOut) this.playSound(wrongAnswer);\n    if (this.getOptionValue(AppConstants.TIMEROPTIONID)) {\n      this.myTimerRef.current.stopTimer();\n    }\n  };\n\n  nextQuestion = () => {\n    //console.log(\"game engine next question qref=\", this.myQuestionRef);\n    const qf = new this.props.qf(this.props.options);\n    this.myQuestionRef.current.nextQuestion(qf);\n    this.setState({ qf: qf });\n  };\n\n  incrementScore(increment = 1) {\n    this.playSound(rightAnswer);\n    //console.log(\"game engine increment score\", this.myScoreKeeperRef);\n    if (this.getOptionValue(AppConstants.TIMEROPTIONID))\n      this.myTimerRef.current.resetTimer();\n    this.myScoreKeeperRef.current.incrementScore(increment);\n  }\n\n  timerTimeOut() {\n    //console.log(\"Timer has timed out.\");\n    this.playSound(timerExpired);\n    this.myQuestionRef.current.timeout();\n    this.myTimerRef.current.stopTimer();\n  }\n\n  updateGrid() {\n    this.myQuestionRef.current.updateGrid();\n  }\n\n  addToTimer() {\n    if (this.getOptionValue(AppConstants.TIMEROPTIONID))\n      this.myTimerRef.current.addToTimer();\n  }\n\n  makeTimer() {\n    // console.log(\n    //   \"make timer option =\",\n    //   this.getOptionValue(AppConstants.TIMEROPTIONID)\n    // );\n    if (this.getOptionValue(AppConstants.TIMEROPTIONID)) {\n      return (\n        <Timer\n          ref={this.myTimerRef}\n          maxtime={this.props.maxtime}\n          addtime={this.props.addtime}\n          timeout={this.timerTimeOut}\n          autoStart={false}\n        />\n      );\n    }\n  }\n\n  render() {\n    //console.log(\"game engine \", this.props.title);\n    Howler.volume(1.0);\n    return (\n      <div className=\"gameEngine\">\n        <h4>{this.props.title}</h4>\n        <div>\n          {/*  global options (for all games) */}\n          <Options options={GLOBALOPTIONS} onChange={this.handleOptions} />\n          {/* options specific to the current game */}\n          <Options\n            options={this.props.options}\n            onChange={this.props.handleOptions}\n          />\n        </div>\n        <ScoreKeeper ref={this.myScoreKeeperRef} />\n        <Question\n          ref={this.myQuestionRef}\n          options={this.props.options}\n          labels={this.props.labels}\n          qf={this.state.qf}\n          nextQuestion={this.nextQuestion}\n          updateGrid={this.updateGrid}\n          incrementScore={this.incrementScore}\n          gameOver={this.gameOver}\n          addToTimer={this.addToTimer}\n        />\n        <button\n          onClick={this.handleRestart}\n          className=\"btn btn-danger m-2 btn-lg\"\n        >\n          Restart\n        </button>\n        {this.makeTimer()}\n      </div>\n    );\n  }\n}\n\nexport default GameEngine;\n","import React, { Component } from \"react\";\nimport { ArrayQuestionFactory } from \"./arrayquestionfactory\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as ArrayConstants from \"./arrayconstants\";\n\nconst ARRAYOPTIONS = [\n  {\n    id: ArrayConstants.LABELSOPTIONID,\n    label: \"Labels\",\n    checked: ArrayConstants.DEFAULTLABELSOPTION,\n  },\n  { id: ArrayConstants.LOOPSOPTIONID, label: \"Loops\", checked: false },\n  { id: ArrayConstants.TWODOPTIONID, label: \"2D\", checked: false },\n];\n\nclass ArrayGameEngine extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n\n    let labels = this.getLabelChecked();\n    //console.log(\"array game constructor labels=\", labels);\n    this.state = {\n      options: ARRAYOPTIONS,\n      qf: ArrayQuestionFactory,\n      labels: labels,\n      maxtime: ArrayConstants.MAXTIME,\n      addtime: ArrayConstants.ADDTIME,\n    };\n  }\n\n  getLabelChecked() {\n    //console.log(\"getLabelIndex returning\");\n    for (let i = 0; i < ARRAYOPTIONS.length; ++i) {\n      if (ARRAYOPTIONS[i].id === ArrayConstants.LABELSOPTIONID)\n        return ARRAYOPTIONS[i].checked;\n    }\n  }\n\n  handleOptions = (options, id, checked) => {\n    //console.log(\"options have changed \", options, id, checked);\n    // label option is handled here.\n    // other options are used by the question factory\n    switch (id) {\n      case ArrayConstants.LABELSOPTIONID:\n        let labels = checked;\n        this.setState({ labels, options });\n        return;\n      default:\n        //console.log(\"option id in array game engine =\", id);\n        break;\n    }\n    this.setState({ options });\n  };\n\n  render() {\n    //console.log(\"disarray game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={ArrayConstants.ARRAYGAMETITLE}\n          options={this.state.options}\n          handleOptions={this.handleOptions}\n          labels={this.state.labels}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n        <h6>Click only on the array cells that are printed.</h6>\n      </div>\n    );\n  }\n}\n\nexport default ArrayGameEngine;\n","export const STRINGGAMETITLE = \"String-Thing\";\n\n// word pool for string game\n// you can add and delete words here freely\n// (will not have any major impact on the game)\nexport const WORDPOOL = [\n  \"DOG\",\n  \"FISH\",\n  \"ZEBRA\",\n  \"SPIDER\",\n  \"GIRAFFE\",\n  \"ELEPHANT\",\n  \"AARDVARK\",\n  \"PANGOLIN\",\n  \"SQUIRREL\",\n];\n\n// timer values for Disarray Game\nexport const MAXTIME = 7; // start timer value\nexport const ADDTIME = 2; // bonus for paritally correct answers\n\nexport const DEFAULTLABELSOPTION = true;\n\nexport const LABELSOPTIONID = 2;\nexport const LOOPSOPTIONID = 3;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\nimport * as StringConstants from \"./stringconstants\";\n\nfunction stringQuestion1(props) {\n  //pick a word from the word pool at random\n  const wordIndex = StringConstants.WORDPOOL.length;\n  const currentWord =\n    StringConstants.WORDPOOL[Math.floor(Math.random() * wordIndex)];\n  // question will have 1 row and 8 columns\n  const sq = new QuestionBaseClass(props, 1, currentWord.length);\n  // adjust the button display values\n  for (let i = 0; i < currentWord.length; ++i) {\n    sq.displayValues[0][i] = currentWord.substring(i, i + 1);\n  }\n  //console.log(\"array question base class\", sq);\n  sq.pointValue = 1;\n  sq.rows = 1;\n  const index = Math.floor(Math.random() * sq.buttonStates[0].length);\n  sq.buttonStates[0][index] = 1;\n  sq.text = [`\"${currentWord}\".substring(${index}, ${index + 1});`];\n  return sq;\n}\n\nexport default stringQuestion1;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\nimport * as StringConstants from \"./stringconstants\";\n\nfunction stringQuestion1r(props) {\n  //pick a word from the word pool at random\n  const wordIndex = StringConstants.WORDPOOL.length;\n  const currentWord =\n    StringConstants.WORDPOOL[Math.floor(Math.random() * wordIndex)];\n  // question will have 1 row and 8 columns\n  const sq = new QuestionBaseClass(props, 1, currentWord.length);\n  // adjust the button display values\n  for (let i = 0; i < currentWord.length; ++i) {\n    sq.displayValues[0][i] = currentWord.substring(i, i + 1);\n  }\n  //console.log(\"array question base class\", sq);\n  sq.pointValue = 2;\n  sq.rows = 1;\n  const length = currentWord.length;\n  const lowerBound = Math.floor((Math.random() * length) / 2);\n  let upperBound =\n    Math.floor(Math.random() * (length - lowerBound)) + lowerBound;\n  for (let i = lowerBound; i <= upperBound; ++i) {\n    sq.buttonStates[0][i] = 1;\n  }\n\n  sq.text = [`\"${currentWord}\".substring(${lowerBound}, ${upperBound + 1});`];\n  return sq;\n}\n\nexport default stringQuestion1r;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\nimport * as StringConstants from \"./stringconstants\";\n\nfunction stringQuestion1s(props) {\n  //pick a word from the word pool at random\n  const wordIndex = StringConstants.WORDPOOL.length;\n  const currentWord =\n    StringConstants.WORDPOOL[Math.floor(Math.random() * wordIndex)];\n  // question will have 1 row and 8 columns\n  const sq = new QuestionBaseClass(props, 1, currentWord.length);\n  // adjust the button display values\n  for (let i = 0; i < currentWord.length; ++i) {\n    sq.displayValues[0][i] = currentWord.substring(i, i + 1);\n  }\n  //console.log(\"array question base class\", sq);\n  sq.pointValue = 2;\n  sq.rows = 1;\n  const length = currentWord.length;\n  const lowerBound = Math.floor(Math.random() * length);\n  for (let i = lowerBound; i < currentWord.length; ++i) {\n    sq.buttonStates[0][i] = 1;\n  }\n\n  sq.text = [`\"${currentWord}\".substring(${lowerBound});`];\n  return sq;\n}\n\nexport default stringQuestion1s;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n//import * as StringConstants from \"./stringconstants\";\n\nfunction stringQuestion1loop(props) {\n  //pick a word from the word pool at random\n  //const wordIndex = StringConstants.WORDPOOL.length;\n  // const currentWord =\n  // StringConstants.WORDPOOL[Math.floor(Math.random() * wordIndex)];\n  const currentWord = \"ABCDEFGH\";\n  // question will have 1 row and 8 columns\n  const sq = new QuestionBaseClass(props, 1, currentWord.length);\n  // adjust the button display values\n  for (let i = 0; i < currentWord.length; ++i) {\n    sq.displayValues[0][i] = currentWord.substring(i, i + 1);\n  }\n  //console.log(\"array question base class\", sq);\n  sq.pointValue = 3;\n  sq.rows = 1;\n  const increment = sq.randomIncrementOrDecrement();\n  const lowerBound = Math.floor((Math.random() * currentWord.length) / 2);\n  let upperBound =\n    Math.floor(Math.random() * (currentWord.length - lowerBound)) + lowerBound;\n  const equalsChar =\n    Math.random() > 0.5 || upperBound === lowerBound ? \"=\" : \"\";\n  sq.text = [\n    'String word = \"' + currentWord + '\";',\n    'Strings s = \"\";',\n    \"for(int i=\" +\n      lowerBound +\n      \"; i <\" +\n      equalsChar +\n      \" \" +\n      upperBound +\n      \"; i+=\" +\n      increment +\n      \") {\",\n    \"   s += word.substring(i, i+1); \",\n    \"}\",\n  ];\n  if (equalsChar === \"=\") {\n    ++upperBound;\n  }\n  for (let i = lowerBound; i < upperBound; i += increment) {\n    sq.buttonStates[0][i] = 1;\n  }\n  return sq;\n}\n\nexport default stringQuestion1loop;\n","import * as StringConstants from \"./stringconstants\";\nimport StringQuestion1 from \"./stringquestion1\";\nimport StringQuestion1r from \"./stringquestion1r\";\nimport StringQuestion1s from \"./stringquestion1s\";\nimport StringQuestion1loop from \"./stringquestion1loop\";\n\nexport class StringQuestionFactory {\n  constructor(options) {\n    if (options) {\n      this.options = [...options];\n      // console.log(\"qf constructor\", this.options);\n      this.loops = false;\n      for (let option of options) {\n        // console.log(\"for option:\", option.id, option.checked);\n        if (option.id === StringConstants.LOOPSOPTIONID) {\n          this.loops = option.checked;\n          // console.log(\"changing loops option to \", this.loops);\n        }\n      }\n    } else {\n      // mixed game\n      this.loops = true;\n    }\n  }\n\n  getQuestion(props) {\n    //console.log(\"getQuestion loops 2D\", this.loops, this.twod);\n\n    let questionTypes = [\n      StringQuestion1,\n      StringQuestion1s,\n      StringQuestion1r,\n      StringQuestion1r,\n      StringQuestion1r,\n    ];\n\n    // add loops?\n    if (this.loops) {\n      questionTypes.push(StringQuestion1loop);\n      questionTypes.push(StringQuestion1loop);\n      questionTypes.push(StringQuestion1loop);\n      questionTypes.push(StringQuestion1loop);\n      questionTypes.push(StringQuestion1loop);\n    }\n\n    const random = Math.floor(Math.random() * questionTypes.length);\n\n    const question = new questionTypes[random](props);\n    //const question = new StringQuestion1(props);\n    //const question = new StringQuestion1r(props);\n    //const question = new StringQuestion1s(props);\n    //const question = new StringQuestion1loop(props);\n    //console.log(\"getQuestion\", question);\n    return question;\n  }\n}\n","import React, { Component } from \"react\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as StringConstants from \"./stringconstants\";\nimport { StringQuestionFactory } from \"./stringquestionfactory\";\n\nconst STRINGOPTIONS = [\n  { id: StringConstants.LOOPSOPTIONID, label: \"Loops\", checked: false },\n];\n\nclass StringGameEngine extends Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: STRINGOPTIONS,\n      qf: StringQuestionFactory,\n      labels: StringConstants.DEFAULTLABELSOPTION,\n      maxtime: StringConstants.MAXTIME,\n      addtime: StringConstants.ADDTIME,\n    };\n  }\n\n  handleOptions = (options, id, checked) => {\n    console.log(\"options have changed\", options, id, checked);\n    // timer and label options are handled here.\n    // other options are used by the question factory\n    switch (id) {\n      case StringConstants.LABELSOPTIONID:\n        let labels = checked;\n        this.setState({ labels, options });\n        return;\n      default:\n        console.log(\"unknown option in string game engine\");\n        break;\n    }\n    this.setState({ options });\n  };\n\n  render() {\n    //console.log(\"disarray game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={StringConstants.STRINGGAMETITLE}\n          options={this.state.options}\n          handleOptions={this.handleOptions}\n          labels={this.state.labels}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n        <h6>Select all the letters that are part of the substring.</h6>\n      </div>\n    );\n  }\n}\n\nexport default StringGameEngine;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQuestionGreater(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 1;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  const op1 = Math.floor(Math.random() * 100);\n  const equalSign = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOp1 = equalSign === \"=\" ? op1 - 1 : op1;\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (buttonValue > adjustedOp1) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [`(x >${equalSign} ${op1})`];\n  return aq;\n}\n\nexport default relationalQuestionGreater;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQuestionLesser(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 1;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  const op1 = Math.floor(Math.random() * 100);\n  const equalSign = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOp1 = equalSign === \"=\" ? op1 + 1 : op1;\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (buttonValue < adjustedOp1) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [`(x <${equalSign} ${op1})`];\n  return aq;\n}\n\nexport default relationalQuestionLesser;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQuestionAnd(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 1;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  let opGT = Math.floor(Math.random() * 100);\n  let opLT = Math.floor(Math.random() * 100);\n\n  if (opGT > opLT) {\n    const temp = opGT;\n    opGT = opLT;\n    opLT = temp;\n  }\n\n  const equalSignGT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpGT = equalSignGT === \"=\" ? opGT - 1 : opGT;\n\n  const equalSignLT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpLT = equalSignLT === \"=\" ? opLT + 1 : opLT;\n\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (buttonValue > adjustedOpGT && buttonValue < adjustedOpLT) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [`((x >${equalSignGT} ${opGT}) && (x <${equalSignLT} ${opLT}))`];\n  return aq;\n}\n\nexport default relationalQuestionAnd;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQuestionOr(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 1;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  let opGT = Math.floor(Math.random() * 100);\n  let opLT = Math.floor(Math.random() * 100);\n\n  if (opLT > opGT) {\n    const temp = opGT;\n    opGT = opLT;\n    opLT = temp;\n  }\n\n  const equalSignGT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpGT = equalSignGT === \"=\" ? opGT - 1 : opGT;\n\n  const equalSignLT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpLT = equalSignLT === \"=\" ? opLT + 1 : opLT;\n\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (buttonValue > adjustedOpGT || buttonValue < adjustedOpLT) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [`((x >${equalSignGT} ${opGT}) || (x <${equalSignLT} ${opLT}))`];\n  return aq;\n}\n\nexport default relationalQuestionOr;\n","// format (x > a || x < b && !(x > c))\n\nimport QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQchallenge1(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const rq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", rq);\n  rq.pointValue = 5;\n  rq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  let opGT = Math.floor(Math.random() * 100);\n  let opLT = Math.floor(Math.random() * 100);\n  let opNE = Math.floor(Math.random() * 100);\n\n  if (opLT > opGT) {\n    const temp = opGT;\n    opGT = opLT;\n    opLT = temp;\n  }\n\n  if (opNE > opLT) {\n    const temp = opLT;\n    opLT = opNE;\n    opNE = temp;\n  }\n\n  const equalSignGT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpGT = equalSignGT === \"=\" ? opGT - 1 : opGT;\n\n  const equalSignLT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpLT = equalSignLT === \"=\" ? opLT + 1 : opLT;\n\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    rq.displayValues[0][i] = buttonValue;\n    if (\n      buttonValue > adjustedOpGT ||\n      (buttonValue < adjustedOpLT && !(buttonValue > opNE))\n    ) {\n      rq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      rq.buttonStates[0][i] = 0;\n    }\n  }\n  rq.buttonStates[0][0] = none;\n  rq.displayValues[0][0] = \"None\";\n  rq.buttonStates[0][dataSize + 1] = all;\n  rq.displayValues[0][dataSize + 1] = \"All\";\n  rq.text = [\n    `(x >${equalSignGT} ${opGT} || ` +\n      `x <${equalSignLT} ${opLT} && !(x >${opNE}))`,\n  ];\n  return rq;\n}\n\nexport default relationalQchallenge1;\n","// format (x > a || x < b && x > c))\n\nimport QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQchallenge2(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 5;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  let opGT = Math.floor(Math.random() * 100);\n  let opLT = Math.floor(Math.random() * 100);\n  let opNE = Math.floor(Math.random() * 100);\n\n  if (opLT > opGT) {\n    const temp = opGT;\n    opGT = opLT;\n    opLT = temp;\n  }\n\n  if (opNE > opLT) {\n    const temp = opLT;\n    opLT = opNE;\n    opNE = temp;\n  }\n\n  const equalSignGT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpGT = equalSignGT === \"=\" ? opGT - 1 : opGT;\n\n  const equalSignLT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpLT = equalSignLT === \"=\" ? opLT + 1 : opLT;\n\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (\n      buttonValue > adjustedOpGT ||\n      (buttonValue < adjustedOpLT && buttonValue > opNE)\n    ) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [\n    `(x >${equalSignGT} ${opGT} || ` +\n      `x <${equalSignLT} ${opLT} && x >${opNE})`,\n  ];\n  return aq;\n}\n\nexport default relationalQchallenge2;\n","// format ( !(x > a) || !(x < b) && !(x > c))\n\nimport QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction relationalQchallenge3(props) {\n  // dataSize currently between 2 and 4, inclusive\n  const dataSize = Math.floor(Math.random() * 3) + 2;\n  //const dataSize = 6; // debug\n  // question will have 1 row and dataSize + 2 columns for All/None\n  const aq = new QuestionBaseClass(props, 1, dataSize + 2);\n  //console.log(\"array question base class\", aq);\n  aq.pointValue = 5;\n  aq.rows = 1;\n  let all = 1;\n  let none = 1;\n\n  let opGT = Math.floor(Math.random() * 100);\n  let opLT = Math.floor(Math.random() * 100);\n  let opNE = Math.floor(Math.random() * 100);\n\n  if (opLT > opGT) {\n    const temp = opGT;\n    opGT = opLT;\n    opLT = temp;\n  }\n\n  if (opLT > opNE) {\n    const temp = opLT;\n    opLT = opNE;\n    opNE = temp;\n  }\n\n  const equalSignGT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpGT = equalSignGT === \"=\" ? opGT - 1 : opGT;\n\n  const equalSignLT = Math.random() > 0.5 ? \"=\" : \"\";\n  const adjustedOpLT = equalSignLT === \"=\" ? opLT + 1 : opLT;\n\n  for (let i = 1; i <= dataSize; ++i) {\n    const buttonValue = Math.floor(Math.random() * 100);\n    aq.displayValues[0][i] = buttonValue;\n    if (\n      !(buttonValue > adjustedOpGT) ||\n      (!(buttonValue < adjustedOpLT) && !(buttonValue > opNE))\n    ) {\n      aq.buttonStates[0][i] = 1;\n      none = 0;\n    } else {\n      all = 0;\n    }\n  }\n  if (all) {\n    for (let i = 1; i <= dataSize; ++i) {\n      aq.buttonStates[0][i] = 0;\n    }\n  }\n  aq.buttonStates[0][0] = none;\n  aq.displayValues[0][0] = \"None\";\n  aq.buttonStates[0][dataSize + 1] = all;\n  aq.displayValues[0][dataSize + 1] = \"All\";\n  aq.text = [\n    `(!(x >${equalSignGT} ${opGT}) || ` +\n      `!(x <${equalSignLT} ${opLT}) && !(x >${opNE}))`,\n  ];\n  return aq;\n}\n\nexport default relationalQchallenge3;\n","import * as RelationalConstants from \"./relationalconstants\";\nimport RelationalQuestionGreater from \"./relationalquestiongreater\";\nimport RelationalQuestionLesser from \"./relationalquestionlesser\";\nimport RelationalQuestionAnd from \"./relationalquestionand\";\nimport RelationalQuestionOr from \"./relationalquestionor\";\nimport RelationalQchallenge1 from \"./relationalqchallenge1\";\nimport RelationalQchallenge2 from \"./relationalqchallenge2\";\nimport RelationalQchallenge3 from \"./relationalqchallenge3\";\n\nexport class RelationalQuestionFactory {\n  constructor(options) {\n    if (options) {\n      this.options = [...options];\n      // console.log(\"qf constructor\", this.options);\n      this.compound = false;\n      for (let option of options) {\n        // console.log(\"for option:\", option.id, option.checked);\n        if (option.id === RelationalConstants.COMPOUNDOPTIONID) {\n          this.compound = option.checked;\n          console.log(\"changing compound option to \", this.compound);\n        }\n        if (option.id === RelationalConstants.CHALLENGEOPTIONID) {\n          this.challenge = option.checked;\n          console.log(\"changing compound option to \", this.challenge);\n        }\n      }\n    } else {\n      // mixed game\n      this.compound = true;\n      this.challenge = true;\n    }\n  }\n\n  getQuestion(props) {\n    //console.log(\"getQuestion loops 2D\", this.loops, this.twod);\n\n    let questionTypes = [RelationalQuestionGreater, RelationalQuestionLesser];\n\n    // add compound?\n    if (this.compound) {\n      questionTypes.push(RelationalQuestionAnd);\n      questionTypes.push(RelationalQuestionAnd);\n      questionTypes.push(RelationalQuestionOr);\n      questionTypes.push(RelationalQuestionOr);\n    }\n\n    // add challenge\n    if (this.challenge) {\n      questionTypes = [];\n      questionTypes.push(RelationalQchallenge1);\n      questionTypes.push(RelationalQchallenge2);\n      questionTypes.push(RelationalQchallenge3);\n    }\n\n    const random = Math.floor(Math.random() * questionTypes.length);\n    const question = new questionTypes[random](props);\n    //const question = new RelationalQuestionLesser(props);\n    //const question = new relationalQuestionGreater(props);\n    //const question = new RelationalQuestionAnd(props);\n    //const question = new RelationalQuestionOr(props);\n    //const question = new RelationalQchallenge3(props);\n    //console.log(\"getQuestion\", question);\n    return question;\n  }\n}\n","export const RELATIONALGAMETITLE = \"All-None: A Relational Game\";\n\n// timer values for Disarray Game\nexport const MAXTIME = 7; // start timer value\nexport const ADDTIME = 2; // bonus for paritally correct answers\n\nexport const DEFAULTCOMPOUNDSOPTION = false;\nexport const DEFAULTCHALLENGESOPTION = false;\n\nexport const COMPOUNDOPTIONID = 2;\nexport const CHALLENGEOPTIONID = 3;\n","import React, { Component } from \"react\";\nimport { RelationalQuestionFactory } from \"./relationalquestionfactory\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as RelationalConstants from \"./relationalconstants\";\n\nconst RELATIONALOPTIONS = [\n  {\n    id: RelationalConstants.COMPOUNDOPTIONID,\n    label: \"Compound\",\n    checked: RelationalConstants.DEFAULTCOMPOUNDSOPTION,\n  },\n  {\n    id: RelationalConstants.CHALLENGEOPTIONID,\n    label: \"Challenge\",\n    checked: RelationalConstants.DEFAULTCHALLENGESOPTION,\n  },\n];\n\nclass RelationalGameEngine extends Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: RELATIONALOPTIONS,\n      qf: RelationalQuestionFactory,\n      compound: RelationalConstants.DEFAULTCOMPOUNDSOPTION,\n      maxtime: RelationalConstants.MAXTIME,\n      addtime: RelationalConstants.ADDTIME,\n    };\n  }\n\n  handleOptions = (options, id, checked) => {\n    console.log(\"options have changed\", options, id, checked);\n    // timer and label options are handled here.\n    // other options are used by the question factory\n    switch (id) {\n      case RelationalConstants.COMPOUNDOPTIONID:\n        let compound = checked;\n        this.setState({ compound, options });\n        return;\n      default:\n        console.log(\"unknown option in relational game engine\");\n        break;\n    }\n    this.setState({ options });\n  };\n\n  render() {\n    //console.log(\"disRelational game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={RelationalConstants.RELATIONALGAMETITLE}\n          options={this.state.options}\n          handleOptions={this.handleOptions}\n          timer={this.state.timer}\n          labels={true}\n          compound={this.state.compound}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n        <h6>Select All, None or only the items that apply.</h6>\n      </div>\n    );\n  }\n}\n\nexport default RelationalGameEngine;\n","import React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanBasicAnd(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 1;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayNumber = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notNumber = \"\";\n  // console.log(\n  //   \"right answer = \",\n  //   rightAnswer,\n  //   displayNumber,\n  //   randomNumber,\n  //   displayColorIndex,\n  //   randomColorIndex\n  // );\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n    if (Math.random() > 0.75) {\n      displayColorIndex = randomColorIndex + 1;\n      notColor = \"!\";\n    }\n  } else {\n    yes = 0;\n    no = 1;\n    if (Math.random() > 0.5) {\n      if (Math.random() > 0.5) {\n        //console.log(\"assign wrong color\");\n        displayColorIndex = randomColorIndex + 1;\n      } else {\n        notColor = \"!\";\n      }\n    } else {\n      if (Math.random() > 0.5) {\n        //console.log(\"assign wrong number\");\n        displayNumber = randomNumber + Math.floor(Math.random() * 3) + 1;\n      } else {\n        notNumber = \"!\";\n      }\n    }\n  }\n\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(${notColor}${AppConstants.COLORNAMES[displayColorIndex]} && ${notNumber}${displayNumber})`,\n  ];\n  return bq;\n}\n\nexport default booleanBasicAnd;\n","import React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\nimport \"../css/code.css\";\n\nfunction booleanBasicOr(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  //console.log(\"boolean question base class\", bq);\n  bq.pointValue = 1;\n  bq.rows = 1;\n  let yes = 1;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayNumber = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notNumber = \"\";\n  // console.log(\n  //   \"right answer = \",\n  //   rightAnswer,\n  //   displayNumber,\n  //   randomNumber,\n  //   displayColorIndex,\n  //   randomColorIndex\n  // );\n  if (rightAnswer) {\n    if (Math.random() > 0.33) {\n      // 2/3 of the time, set one of the operands to be incorrect\n      if (Math.random() > 0.5) {\n        //assign wrong color\n        displayColorIndex = randomColorIndex + 1;\n      } else {\n        //assign wrong number\n        displayNumber = randomNumber + Math.floor(Math.random() * 3) + 1;\n      }\n    }\n  } else {\n    yes = 0;\n    no = 1;\n    if (Math.random() > 0.25) {\n      //console.log(\"assign wrong color\");\n      displayColorIndex = randomColorIndex + 1;\n      //console.log(\"assign wrong number\");\n      displayNumber = randomNumber + Math.floor(Math.random() * 3) + 1;\n    } else {\n      notColor = \"!\";\n      notNumber = \"!\";\n    }\n  }\n\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(${notColor}${AppConstants.COLORNAMES[displayColorIndex]} || ${notNumber}${displayNumber})`,\n  ];\n  return bq;\n}\n\nexport default booleanBasicOr;\n","import React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanCompoundAnd(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 2;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayColorIndex2 = randomColorIndex;\n  let displayNumber = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notColor2 = \"\";\n  let notNumber = \"\";\n  // console.log(\n  //   \"right answer = \",\n  //   rightAnswer,\n  //   displayNumber,\n  //   randomNumber,\n  //   displayColorIndex,\n  //   randomColorIndex\n  // );\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n    if (Math.random() > 0.5) {\n      displayColorIndex = randomColorIndex + 1;\n      notColor = \"!\";\n    }\n    if (Math.random() > 0.5) {\n      displayColorIndex2 = randomColorIndex + 1;\n      notColor2 = \"!\";\n    }\n    if (Math.random() > 0.5) {\n      displayNumber = randomNumber + 1;\n      notNumber = \"!\";\n    }\n  } else {\n    yes = 0;\n    no = 1;\n    if (Math.random() > 0.5) {\n      if (Math.random() > 0.5) {\n        //console.log(\"assign wrong color\");\n        displayColorIndex = randomColorIndex + 1;\n      } else {\n        notColor = \"!\";\n      }\n    } else {\n      if (Math.random() > 0.75) {\n        //console.log(\"assign wrong number\");\n        displayNumber = randomNumber + Math.floor(Math.random() * 3) + 1;\n      } else {\n        if (Math.random() > 0.5) {\n          notNumber = \"!\";\n        } else {\n          notColor2 = \"!\";\n        }\n      }\n    }\n  }\n\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(  (${notColor}${AppConstants.COLORNAMES[displayColorIndex]} && ${notNumber}${displayNumber}) && (${notColor2}${AppConstants.COLORNAMES[displayColorIndex2]})  )`,\n  ];\n  return bq;\n}\n\nexport default booleanCompoundAnd;\n","// format (a && b) || (c && d)\n\nimport React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanCompoundOr(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 2;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayColorIndex2 = randomColorIndex;\n  let displayNumber = randomNumber;\n  let displayNumber2 = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notColor2 = \"\";\n  let notNumber = \"\";\n  let notNumber2 = \"\";\n\n  const split = Math.random();\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n\n    if (split < 0.2) {\n      notColor = \"!\";\n    }\n    if (split >= 0.2 && split < 0.4) {\n      ++displayColorIndex;\n      notNumber = \"!\";\n    }\n    if (split >= 0.4 && split < 0.6) {\n      --displayNumber2;\n      ++displayColorIndex;\n      notColor = \"!\";\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayColorIndex;\n      --displayNumber2;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.8) {\n      ++displayColorIndex;\n      notColor = \"!\";\n      --displayNumber;\n      notNumber = \"!\";\n      ++displayNumber2;\n      notNumber2 = \"!\";\n    }\n  }\n  if (!rightAnswer) {\n    yes = 0;\n    no = 1;\n    if (split < 0.2) {\n      ++displayNumber;\n      ++displayColorIndex2;\n    }\n    if (split >= 0.2 && split < 0.4) {\n      displayNumber2 += 2;\n      ++displayColorIndex;\n    }\n    if (split >= 0.4 && split < 0.6) {\n      ++displayColorIndex;\n      notColor2 = \"!\";\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayNumber;\n      ++displayColorIndex2;\n      --displayNumber2;\n      ++displayColorIndex;\n    }\n    if (split >= 0.8) {\n      notNumber = \"!\";\n      displayNumber2 += 3;\n    }\n  }\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  console.log(\n    \"right answer = \",\n    color,\n    rightAnswer,\n    displayNumber,\n    randomNumber,\n    displayColorIndex,\n    randomColorIndex\n  );\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(  (${notColor}${AppConstants.COLORNAMES[displayColorIndex]} && ${notNumber}${displayNumber}) || (${notColor2}${AppConstants.COLORNAMES[displayColorIndex2]} && ${notNumber2}${displayNumber2})  )`,\n  ];\n  return bq;\n}\n\nexport default booleanCompoundOr;\n","// format (a && b || c && d)\n\nimport React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanChallenge1(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 4;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayColorIndex2 = randomColorIndex;\n  let displayNumber = randomNumber;\n  let displayNumber2 = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notColor2 = \"\";\n  let notNumber = \"\";\n  let notNumber2 = \"\";\n\n  const split = Math.random();\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n\n    if (split < 0.2) {\n      notColor = \"!\";\n    }\n    if (split >= 0.2 && split < 0.4) {\n      ++displayColorIndex;\n      notNumber = \"!\";\n    }\n    if (split >= 0.4 && split < 0.6) {\n      --displayNumber2;\n      ++displayColorIndex;\n      notColor = \"!\";\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayColorIndex;\n      --displayNumber2;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.8) {\n      ++displayColorIndex;\n      notColor = \"!\";\n      --displayNumber;\n      notNumber = \"!\";\n      ++displayNumber2;\n      notNumber2 = \"!\";\n    }\n  }\n  if (!rightAnswer) {\n    yes = 0;\n    no = 1;\n    if (split < 0.2) {\n      ++displayNumber;\n      ++displayColorIndex2;\n    }\n    if (split >= 0.2 && split < 0.4) {\n      displayNumber2 += 2;\n      ++displayColorIndex;\n    }\n    if (split >= 0.4 && split < 0.6) {\n      ++displayColorIndex;\n      notColor2 = \"!\";\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayNumber;\n      ++displayColorIndex2;\n      --displayNumber2;\n      ++displayColorIndex;\n    }\n    if (split >= 0.8) {\n      notNumber = \"!\";\n      displayNumber2 += 3;\n    }\n  }\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  console.log(\n    \"right answer = \",\n    color,\n    rightAnswer,\n    displayNumber,\n    randomNumber,\n    displayColorIndex,\n    randomColorIndex\n  );\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(  ${notColor}${AppConstants.COLORNAMES[displayColorIndex]} && ${notNumber}${displayNumber} || ${notColor2}${AppConstants.COLORNAMES[displayColorIndex2]} && ${notNumber2}${displayNumber2}  )`,\n  ];\n  return bq;\n}\n\nexport default booleanChallenge1;\n","// format (a && b || c && d)\n\nimport React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanChallengeOr1(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 4;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayColorIndex2 = randomColorIndex;\n  let displayNumber = randomNumber;\n  let displayNumber2 = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notColor2 = \"\";\n  let notNumber = \"\";\n  let notNumber2 = \"\";\n\n  const split = Math.random();\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n\n    if (split < 0.2) {\n      notNumber = \"!\";\n      ++displayColorIndex2;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.2 && split < 0.4) {\n      ++displayColorIndex;\n      notColor = \"!\";\n      displayNumber += 2;\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.4 && split < 0.6) {\n      ++displayColorIndex;\n      displayNumber += 2;\n      notColor2 = \"!\";\n      ++displayNumber2;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayColorIndex;\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.8) {\n      ++displayColorIndex;\n      ++displayNumber2;\n      notColor2 = \"!\";\n      ++displayColorIndex2;\n      notNumber2 = \"!\";\n    }\n  }\n  if (!rightAnswer) {\n    yes = 0;\n    no = 1;\n    if (split < 0.2) {\n      ++displayColorIndex;\n      ++displayNumber;\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.2 && split < 0.4) {\n      ++displayColorIndex;\n      notNumber = \"!\";\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.4 && split < 0.6) {\n      notColor = \"!\";\n      notNumber = \"!\";\n      ++displayColorIndex2;\n      --displayNumber2;\n    }\n    if (split >= 0.6 && split < 0.8) {\n      notColor = \"!\";\n      displayNumber += 2;\n      notColor2 = \"!\";\n      ++displayNumber2;\n    }\n    if (split >= 0.8) {\n      notColor = \"!\";\n      displayNumber += 2;\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n  }\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  console.log(\n    \"right answer = \",\n    color,\n    rightAnswer,\n    displayNumber,\n    randomNumber,\n    displayColorIndex,\n    randomColorIndex\n  );\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(  ${notColor}${AppConstants.COLORNAMES[displayColorIndex]} || ${notNumber}${displayNumber} || ${notColor2}${AppConstants.COLORNAMES[displayColorIndex2]} || ${notNumber2}${displayNumber2}  )`,\n  ];\n  return bq;\n}\n\nexport default booleanChallengeOr1;\n","// format (a || b && c || d)\n\nimport React from \"react\";\nimport QuestionBaseClass from \"../components/questionbaseclass\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as AppConstants from \"../util/appconstants\";\n\nfunction booleanChallengeAnd1(props) {\n  // question will have 1 row and 2 columns for yes/no\n  const bq = new QuestionBaseClass(props, 1, 2);\n  console.log(\"boolean question base class\", bq);\n  bq.pointValue = 4;\n  bq.rows = 1;\n  let yes = 0;\n  let no = 0;\n\n  // 5 colors in AppConstants currently used (clear button colors not used)\n  // the +2 skips the clear colors\n  const randomColorIndex =\n    Math.floor(Math.random() * AppConstants.USABLECOLORS) + 2;\n\n  const color = AppConstants.BUTTONCOLORS[randomColorIndex];\n  const randomNumber = Math.floor(Math.random() * 3) + 1;\n  let displayColorIndex = randomColorIndex;\n  let displayColorIndex2 = randomColorIndex;\n  let displayNumber = randomNumber;\n  let displayNumber2 = randomNumber;\n  const rightAnswer = Math.random() > 0.5 ? true : false;\n  let notColor = \"\";\n  let notColor2 = \"\";\n  let notNumber = \"\";\n  let notNumber2 = \"\";\n\n  const split = Math.random();\n  if (rightAnswer) {\n    yes = 1;\n    no = 0;\n\n    if (split < 0.2) {\n      ++displayColorIndex;\n      displayNumber += 3;\n      notNumber = \"!\";\n      --displayNumber2;\n    }\n    if (split >= 0.2 && split < 0.4) {\n      notColor = \"!\";\n      displayNumber += 2;\n      notNumber = \"!\";\n      --displayNumber2;\n    }\n    if (split >= 0.4 && split < 0.6) {\n      notColor = \"!\";\n      ++displayNumber;\n      notNumber = \"!\";\n      ++displayColorIndex2;\n      notColor2 = \"!\";\n      --displayNumber2;\n    }\n    if (split >= 0.6 && split < 0.8) {\n      ++displayColorIndex;\n      displayNumber += 2;\n      notNumber = \"!\";\n      ++displayColorIndex2;\n    }\n    if (split >= 0.8) {\n      --displayNumber;\n      ++displayNumber2;\n      ++displayColorIndex2;\n    }\n  }\n  if (!rightAnswer) {\n    yes = 0;\n    no = 1;\n    if (split < 0.2) {\n      notColor = \"!\";\n      --displayNumber;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.2 && split < 0.4) {\n      notColor = \"!\";\n      ++displayColorIndex2;\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.4 && split < 0.6) {\n      notColor = \"!\";\n      ++displayColorIndex2;\n      --displayNumber2;\n    }\n    if (split >= 0.6 && split < 0.8) {\n      notColor = \"!\";\n      notNumber = \"!\";\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n    if (split >= 0.8) {\n      ++displayColorIndex;\n      notColor2 = \"!\";\n      notNumber2 = \"!\";\n    }\n  }\n  bq.buttonStates[0][0] = yes;\n  bq.displayValues[0][0] = \"true\";\n  bq.buttonStates[0][1] = no;\n  bq.displayValues[0][1] = \"false\";\n  console.log(\n    \"right answer = \",\n    color,\n    rightAnswer,\n    displayNumber,\n    randomNumber,\n    displayColorIndex,\n    randomColorIndex\n  );\n  const button = (\n    <div className={\"centered\"}>\n      <button className={\"btn \" + color}>{randomNumber}</button>\n    </div>\n  );\n  bq.text = [\n    button,\n    `(  ${notColor}${AppConstants.COLORNAMES[displayColorIndex]} || ${notNumber}${displayNumber} && ${notColor2}${AppConstants.COLORNAMES[displayColorIndex2]} || ${notNumber2}${displayNumber2}  )`,\n  ];\n  return bq;\n}\n\nexport default booleanChallengeAnd1;\n","import * as BooleanConstants from \"./booleanconstants\";\nimport BooleanBasicAnd from \"./booleanbasicand\";\nimport BooleanBasicOr from \"./booleanbasicor\";\nimport BooleanCompoundAnd from \"./booleancompoundand\";\nimport BooleanCompoundOr from \"./booleancompoundor\";\nimport BooleanChallenge1 from \"./booleanchallenge1\";\nimport BooleanChallengeOr1 from \"./booleanchallengeor1\";\nimport BooleanChallengeAnd1 from \"./booleanchallengeand1\";\n\nexport class BooleanQuestionFactory {\n  constructor(options) {\n    if (options) {\n      this.options = [...options];\n      // console.log(\"qf constructor\", this.options);\n      this.compound = false;\n      for (let option of options) {\n        // console.log(\"for option:\", option.id, option.checked);\n        if (option.id === BooleanConstants.COMPOUNDOPTIONID) {\n          this.compound = option.checked;\n          //console.log(\"changing compound option to\", this.compound);\n        }\n        if (option.id === BooleanConstants.CHALLENGEOPTIONID) {\n          this.challenge = option.checked;\n          // console.log(\"changing compound option to \", this.challenge);\n        }\n      }\n    } else {\n      this.compound = true;\n      this.challenge = true;\n    }\n  }\n\n  getQuestion(props) {\n    //console.log(\"getQuestion loops 2D\", this.loops, this.twod);\n\n    let questionTypes = [BooleanBasicAnd, BooleanBasicOr];\n\n    // add compound?\n    if (this.compound) {\n      questionTypes.push(BooleanCompoundAnd);\n      questionTypes.push(BooleanCompoundAnd);\n      questionTypes.push(BooleanCompoundAnd);\n      questionTypes.push(BooleanCompoundOr);\n      questionTypes.push(BooleanCompoundOr);\n      questionTypes.push(BooleanCompoundOr);\n    }\n\n    // add challenge\n    if (this.challenge) {\n      questionTypes = [];\n      questionTypes.push(BooleanChallenge1);\n      questionTypes.push(BooleanChallengeOr1);\n      questionTypes.push(BooleanChallengeAnd1);\n    }\n\n    const random = Math.floor(Math.random() * questionTypes.length);\n    const question = new questionTypes[random](props);\n\n    //const question = new BooleanBasicOr(props);\n    //const question = new BooleanBasicAnd(props);\n    //const question = new BooleanCompoundAnd(props);\n    //const question = new BooleanCompoundOr(props);\n    //const question = new BooleanChallengeOr1(props);\n    //const question = new BooleanChallengeAnd1(props);\n    console.log(\"getQuestion\", question);\n    return question;\n  }\n}\n","export const BOOLEANGAMETITLE = \"True-False: A Boolean Game\";\n\n// timer values for Disarray Game\nexport const MAXTIME = 5; // start timer value\nexport const ADDTIME = 0; // bonus for paritally correct answers\n\nexport const DEFAULTCOMPOUNDSOPTION = false;\nexport const DEFAULTCHALLENGESOPTION = false;\n\nexport const COMPOUNDOPTIONID = 2;\nexport const CHALLENGEOPTIONID = 3;\n","import React, { Component } from \"react\";\nimport { BooleanQuestionFactory } from \"./booleanquestionfactory\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as BooleanConstants from \"./booleanconstants\";\n\nconst BOOLEANOPTIONS = [\n  {\n    id: BooleanConstants.COMPOUNDOPTIONID,\n    label: \"Compound\",\n    checked: BooleanConstants.DEFAULTCOMPOUNDSOPTION,\n  },\n  {\n    id: BooleanConstants.CHALLENGEOPTIONID,\n    label: \"Challenge\",\n    checked: BooleanConstants.DEFAULTCHALLENGESOPTION,\n  },\n];\n\nclass BooleanGameEngine extends Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: BOOLEANOPTIONS,\n      qf: BooleanQuestionFactory,\n      compound: BooleanConstants.DEFAULTCOMPOUNDSOPTION,\n      maxtime: BooleanConstants.MAXTIME,\n      addtime: BooleanConstants.ADDTIME,\n    };\n  }\n\n  handleOptions = (options, id, checked) => {\n    console.log(\"options have changed\", options, id, checked);\n    // timer and label options are handled here.\n    // other options are used by the question factory\n    switch (id) {\n      case BooleanConstants.COMPOUNDOPTIONID:\n        let compound = checked;\n        this.setState({ compound, options });\n        return;\n      default:\n        console.log(\"unknown option in Boolean game engine\");\n        break;\n    }\n    this.setState({ options });\n  };\n\n  render() {\n    //console.log(\"disBoolean game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={BooleanConstants.BOOLEANGAMETITLE}\n          options={this.state.options}\n          handleOptions={this.handleOptions}\n          timer={this.state.timer}\n          labels={true}\n          compound={this.state.compound}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n        <h6>Click true if the button matches the boolean expresion.</h6>\n      </div>\n    );\n  }\n}\n\nexport default BooleanGameEngine;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction loopQuestion1(props) {\n  // question will have 1 row and 8 columns\n  const lq = new QuestionBaseClass(props, 1, 8);\n  //console.log(\"array question base class\", lq);\n  lq.pointValue = 1;\n  lq.rows = 1;\n  // increment is 1,2 or 3\n  const increment = lq.randomIncrementOrDecrement();\n  const lowerBound = Math.floor(Math.random() * 4);\n  let upperBound = Math.floor(Math.random() * (8 - lowerBound)) + lowerBound;\n  let equalsChar = Math.random() > 0.5 ? \"=\" : \"\";\n  // bug fix 11/26/2020 make sure loop does not run 8 times\n  if (lowerBound === 0 && upperBound === 7) equalsChar = \"\";\n  lq.text = [\n    \"for(int i=\" +\n      lowerBound +\n      \"; i <\" +\n      equalsChar +\n      \" \" +\n      upperBound +\n      \"; i+=\" +\n      increment +\n      \") {\",\n    '   System.out.println(\"Hello!\");',\n    \"}\",\n  ];\n  if (equalsChar === \"=\") {\n    ++upperBound;\n  }\n  let index = 0;\n  for (let i = lowerBound; i < upperBound; i += increment) {\n    ++index;\n  }\n  lq.buttonStates[0][index] = 1;\n  return lq;\n}\n\nexport default loopQuestion1;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction loopQuestion1b(props) {\n  // question will have 1 row and 8 columns\n  const aq = new QuestionBaseClass(props, 1, 8);\n  //console.log(\"loop question base class\", aq);\n  aq.pointValue = 2;\n  aq.rows = 1;\n  const decrement = aq.randomIncrementOrDecrement();\n  let lowerBound = Math.floor(Math.random() * 4);\n  const upperBound = Math.floor(Math.random() * (8 - lowerBound)) + lowerBound;\n  let equalsChar = Math.random() > 0.5 ? \"=\" : \"\";\n  // bug fix 11/26/2020 make sure loop does not run 8 times\n  if (lowerBound === 0 && upperBound === 7) equalsChar = \"\";\n  aq.text = [\n    \"for(int i=\" +\n      upperBound +\n      \"; i >\" +\n      equalsChar +\n      \" \" +\n      lowerBound +\n      \"; i-=\" +\n      decrement +\n      \") {\",\n    '   System.out.println(\"Hello\");',\n    \"}\",\n  ];\n  if (equalsChar === \"=\") {\n    --lowerBound;\n  }\n  let index = 0;\n  for (let i = upperBound; i > lowerBound; i -= decrement) {\n    ++index;\n  }\n  aq.buttonStates[0][index] = 1;\n  return aq;\n}\n\nexport default loopQuestion1b;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction loopQuestionNested(props) {\n  console.log(\"loop question nested\");\n  // question will have 1 row and 10 columns\n  const lq = new QuestionBaseClass(props, 1, 8);\n\n  lq.pointValue = 3;\n  lq.rows = 1;\n  // increment is 1 or 2\n  let index = 0;\n  do {\n    let incrementOuter = Math.random() > 0.75 ? 2 : 1;\n    let lowerBoundOuter = Math.floor(Math.random() * 4);\n    let upperBoundOuter =\n      Math.floor(Math.random() * (8 - lowerBoundOuter)) + lowerBoundOuter;\n\n    let incrementInner = Math.random() > 0.75 ? 2 : 1;\n    let lowerBoundInner = Math.floor(Math.random() * 4);\n    let upperBoundInner =\n      Math.floor(Math.random() * (8 - lowerBoundInner)) + lowerBoundInner;\n\n    let equalsCharOuter = Math.random() > 0.5 ? \"=\" : \"\";\n    let equalsCharInner = Math.random() > 0.5 ? \"=\" : \"\";\n    // bug fix 11/26/2020 make sure loop does not run 8 times\n    if (lowerBoundInner === 0 && upperBoundInner === 7) equalsCharInner = \"\";\n    // bug fix 11/26/2020 make sure loop does not run 8 times\n    if (lowerBoundOuter === 0 && upperBoundOuter === 7) equalsCharOuter = \"\";\n    lq.text = [\n      \"for(int i=\" +\n        lowerBoundOuter +\n        \"; i <\" +\n        equalsCharOuter +\n        \" \" +\n        upperBoundOuter +\n        \"; i+=\" +\n        incrementOuter +\n        \") {\",\n      \"   for(int j=\" +\n        lowerBoundInner +\n        \"; j <\" +\n        equalsCharInner +\n        \" \" +\n        upperBoundInner +\n        \"; j+=\" +\n        incrementInner +\n        \") {\",\n      '      System.out.println(\"Hello\");',\n      \"   }\",\n      \"}\",\n    ];\n    if (equalsCharOuter === \"=\") {\n      ++upperBoundOuter;\n    }\n    if (equalsCharInner === \"=\") {\n      ++upperBoundInner;\n    }\n\n    index = 0; // reset to zero for every do/while iteration\n    for (let i = lowerBoundOuter; i < upperBoundOuter; i += incrementOuter) {\n      for (let j = lowerBoundInner; j < upperBoundInner; j += incrementInner) {\n        ++index;\n      }\n    }\n  } while (index > 7);\n\n  console.log(\"button states, right answer\", lq.buttonStates, index);\n  lq.buttonStates[0][index] = 1;\n\n  return lq;\n}\n\nexport default loopQuestionNested;\n","import QuestionBaseClass from \"../components/questionbaseclass\";\n\nfunction loopQuestionDo(props) {\n  // question will have 1 row and 8 columns\n  const lq = new QuestionBaseClass(props, 1, 8);\n  console.log(\"loop question base class\", lq);\n  lq.pointValue = 1;\n  lq.rows = 1;\n  // increment is 1,2 or 3\n  const lowerBound = Math.floor(Math.random() * 4);\n  let upperBound = Math.floor(Math.random() * (8 - lowerBound)) + lowerBound;\n  let equalsChar = Math.random() > 0.5 ? \"=\" : \"\";\n  // bug fix 11/26/2020 make sure loop does not run 8 times\n  if (lowerBound === 0 && upperBound === 7) equalsChar = \"\";\n  lq.text = [\n    \"int i=\" + lowerBound + \";\",\n    \"do {\",\n    '   System.out.println(\"Hello!\");',\n    \"} while (++i <\" + equalsChar + \" \" + upperBound + \");\",\n  ];\n  if (equalsChar === \"=\") {\n    ++upperBound;\n  }\n  let index = lowerBound;\n  let counter = 0;\n  do {\n    ++counter;\n    console.log(\"counter = \", counter);\n  } while (++index < upperBound);\n  lq.buttonStates[0][counter] = 1;\n  return lq;\n}\n\nexport default loopQuestionDo;\n","import * as LoopConstants from \"./loopconstants\";\nimport loopQuestion1 from \"./loopquestion1\";\nimport loopQuestion1b from \"./loopquestion1b\";\nimport loopQuestionNested from \"./loopquestionnested\";\nimport loopQuestionDo from \"./loopquestiondo\";\n\nexport class LoopQuestionFactory {\n  constructor(options) {\n    if (options) {\n      this.options = [...options];\n      // console.log(\"qf constructor\", this.options);\n      this.backwards = false;\n      this.do = false;\n      this.nested = false;\n      for (let option of options) {\n        // console.log(\"for option:\", option.id, option.checked);\n        if (option.id === LoopConstants.BACKWARDSOPTIONID) {\n          this.backwards = option.checked;\n          // console.log(\"changing backwards option to \", this.backwards);\n        }\n        if (option.id === LoopConstants.DOOPTIONID) {\n          this.do = option.checked;\n          // console.log(\"changing do while option to \", this.nested);\n        }\n        if (option.id === LoopConstants.NESTEDOPTIONID) {\n          this.nested = option.checked;\n          // console.log(\"changing nested option to \", this.nested);\n        }\n      }\n    } else {\n      // mixed game\n      this.backwards = true;\n      this.do = true;\n      this.nested = true;\n    }\n  }\n\n  getQuestion(props) {\n    //console.log(\"getquestion props\", props);\n\n    //console.log(\"getQuestion backwards nested\", this.backwards, this.nested);\n\n    let questionTypes = [loopQuestion1];\n\n    // add backwards?\n    if (this.backwards) {\n      questionTypes.push(loopQuestion1b);\n      questionTypes.push(loopQuestion1b);\n    }\n\n    // add do while?\n    if (this.do) {\n      questionTypes.push(loopQuestionDo);\n      questionTypes.push(loopQuestionDo);\n    }\n\n    // add nested\n    if (this.nested) {\n      questionTypes.push(loopQuestionNested);\n      questionTypes.push(loopQuestionNested);\n      questionTypes.push(loopQuestionNested);\n      questionTypes.push(loopQuestionNested);\n    }\n\n    const random = Math.floor(Math.random() * questionTypes.length);\n    const question = new questionTypes[random](props);\n    //console.log(\"creating question in factory\", question);\n    //const question = new loopQuestion1(props);\n    //const question = new loopQuestion1b(props);\n    //const question = new loopQuestionNested(props);\n    // const question = new loopQuestionDo(props);\n    //console.log(\"getQuestion\", question);\n    return question;\n  }\n}\n","export const LOOPGAMETITLE = \"Loop Counter: Count the Loops\";\n\n// timer values for Disarray Game\nexport const MAXTIME = 8; // start timer value\nexport const ADDTIME = 2; // bonus for paritally correct answers\n\nexport const DEFAULTBACKWARDSSOPTION = false;\nexport const DEFAULTDOOPTION = false;\nexport const DEFAULTNESTEDOPTION = false;\n\nexport const BACKWARDSOPTIONID = 2;\nexport const DOOPTIONID = 3;\nexport const NESTEDOPTIONID = 4;\n","import { ArrayQuestionFactory } from \"../arraycomponents/arrayquestionfactory\";\nimport { BooleanQuestionFactory } from \"../booleancomponents/booleanquestionfactory\";\nimport { RelationalQuestionFactory } from \"../relationalcomponents/relationalquestionfactory\";\nimport { StringQuestionFactory } from \"../stringcomponents/stringquestionfactory\";\nimport { LoopQuestionFactory } from \"../loopcomponents/loopquestionfactory\";\n\nexport class MixedQuestionFactory {\n  constructor(options) {\n    console.log(\"mixedquestion factory constructor\");\n  }\n\n  getQuestion(props) {\n    const factories = [\n      ArrayQuestionFactory,\n      BooleanQuestionFactory,\n      RelationalQuestionFactory,\n      StringQuestionFactory,\n      LoopQuestionFactory,\n    ];\n    const factory = new factories[\n      Math.floor(Math.random() * factories.length)\n    ]();\n    console.log(\"factory=\", factory);\n    const question = factory.getQuestion(props);\n    console.log(\"mixed question =\", question);\n    return question;\n  }\n}\n","import React, { Component } from \"react\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as MixedConstants from \"./mixedconstants\";\nimport { MixedQuestionFactory } from \"./mixedquestionfactory\";\n\nclass MixedGameEngine extends Component {\n  state = {};\n  constructor(props) {\n    super(props);\n    this.state = {\n      qf: MixedQuestionFactory,\n\n      maxtime: MixedConstants.MAXTIME,\n      addtime: MixedConstants.ADDTIME,\n    };\n  }\n\n  render() {\n    //console.log(\"disarray game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={MixedConstants.MIXEDGAMETITLE}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MixedGameEngine;\n","export const MIXEDGAMETITLE = \"Random Question Mix\";\n\n// timer values for Disarray Game\nexport const MAXTIME = 7; // start timer value\nexport const ADDTIME = 2; // bonus for paritally correct answers\n","import React, { Component } from \"react\";\nimport { LoopQuestionFactory } from \"./loopquestionfactory\";\nimport GameEngine from \"../components/GameEngine\";\nimport * as LoopConstants from \"./loopconstants\";\n\nconst LOOPOPTIONS = [\n  {\n    id: LoopConstants.BACKWARDSOPTIONID,\n    label: \"Backwards\",\n    checked: LoopConstants.DEFAULTBACKWARDSSOPTION,\n  },\n  {\n    id: LoopConstants.DOOPTIONID,\n    label: \"Do While\",\n    checked: LoopConstants.DEFAULTDOOPTION,\n  },\n  {\n    id: LoopConstants.NESTEDOPTIONID,\n    label: \"Nested\",\n    checked: LoopConstants.DEFAULTNESTEDOPTION,\n  },\n];\n\nclass LoopGameEngine extends Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: LOOPOPTIONS,\n      qf: LoopQuestionFactory,\n      maxtime: LoopConstants.MAXTIME,\n      addtime: LoopConstants.ADDTIME,\n    };\n  }\n\n  handleOptions = (options, id, checked) => {\n    console.log(\"options have changed \", options, id, checked);\n    this.setState({ options });\n  };\n\n  render() {\n    //console.log(\"Loops game engine render labels = \", this.state.labels);\n\n    return (\n      <div>\n        <GameEngine\n          title={LoopConstants.LOOPGAMETITLE}\n          options={this.state.options}\n          handleOptions={this.handleOptions}\n          qf={this.state.qf}\n          maxtime={this.state.maxtime}\n          addtime={this.state.addtime}\n        />\n        <h6>How many times will \"Hello\" be printed?</h6>\n      </div>\n    );\n  }\n}\n\nexport default LoopGameEngine;\n","import React from \"react\";\nimport \"./css/App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport ArrayGameEngine from \"./arraycomponents/ArrayGameEngine\";\nimport StringGameEngine from \"./stringcomponents/StringGameEngine\";\nimport * as AppConstants from \"./util/appconstants\";\nimport RelationalGameEngine from \"./relationalcomponents/RelationalGameDesign\";\nimport BooleanGameEngine from \"./booleancomponents/BooleanGameEngine\";\nimport MixedGameEngine from \"./mixedcomponents/MixedGameEngine\";\nimport LoopGameEngine from \"./loopcomponents/LoopGameEngine\";\n// eslint-disable-next-line\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.gameEngines = [\n      <StringGameEngine />,\n      <RelationalGameEngine />,\n      <BooleanGameEngine />,\n      <LoopGameEngine />,\n      <ArrayGameEngine />,\n      <MixedGameEngine />,\n    ];\n    this.state = {\n      currentGame: this.gameEngines[AppConstants.DEFAULTGAMEINDEX],\n    };\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n  handleButton(e) {\n    this.setState({ currentGame: this.gameEngines[e.target.id] });\n    //console.log(\"button clicked\", this.gameEngines[e.target.id]);\n  }\n\n  render() {\n    return (\n      <div className=\"Outer\">\n        <div className=\"App\">\n          <nav className=\"navbar navbar-nav navbar-dark bg-primary m-1\">\n            <h2>\n              <i>{AppConstants.APPTITLE}</i>\n            </h2>\n            <div>\n              <button\n                onClick={this.handleButton}\n                id={AppConstants.STRINGGAMEINDEX}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Strings\n              </button>\n              <button\n                onClick={this.handleButton}\n                id={AppConstants.RELATIONALGAMEINDEX}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Relational\n              </button>\n              <button\n                onClick={this.handleButton}\n                id={AppConstants.BOOLEANGAMEINDEX}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Boolean\n              </button>\n              <button\n                // autoFocus\n                onClick={this.handleButton}\n                id={AppConstants.LOOPGAMEINDEX}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Loops\n              </button>\n              <button\n                id={AppConstants.ARRAYGAMEINDEX}\n                onClick={this.handleButton}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Arrays\n              </button>\n              <button\n                onClick={this.handleButton}\n                id={AppConstants.MIXEDGAMEINDEX}\n                className=\"btn btn-sm btn-primary m-1\"\n              >\n                Mixed\n              </button>\n            </div>\n          </nav>\n\n          {this.state.currentGame}\n\n          <footer className=\"page-footer font-small blue pt-4\">\n            <div className=\"footer-copyright text-center py-3\">\n              {AppConstants.DISCLAIMER}\n              <a href=\"https://sites.google.com/view/codinggames/home\">\n                https://sites.google.com/view/codinggames/home\n              </a>\n            </div>\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}